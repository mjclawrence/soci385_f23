---
title: "Week Two, Class One"
author: "Matt Lawrence"
date: "September 19, 2023"
format: html
---

## Getting Started

To begin, copy all the text on this screen. Then open RStudio, and in the "File" menu select "New File" then "Quarto". Add a title like "SOCI 385, Week Two, Class One", include your name in the "Author" box, select "HTML" as the output format, and click Ok. A default markdown file will open. Delete all the text in the default file below the header (everything after line 5) and paste in the text you copied to your clipboard. Make sure that "Quarto" is selected in the file type drop down menu in the bottom right corner of this pane. Save this file.

Load the dataset as a data frame called `colleges` using the `read.csv()` function:

```{r load data}
colleges <- read_csv("https://raw.githubusercontent.com/mjclawrence/soci385_f23/main/data/colleges.csv", stringsAsFactors = TRUE)
```

How many observations and variables are there in this data frame?

What kind of variable is the `region` variable? (`region` is census region)

What kind of variable is `iclevel` variable? (`iclevel` is the institutional control type)

What kind of variable is the `count` variable? (`count` is the number of observations)

What kind of variable is the `female` variable? (`female` is the proportion of students at an institution who are female)

## Reviewing Tables and Summaries

Let's do a quick review of the functions we started looking at last week. If you want to know how many colleges in this data frame are in each region, you could make a table. 

```{r region table}
table(colleges$region)
```

The table lists categories in alphabetical order by default. With only four possible values, it is pretty easy to pick out the *modal value* even when they are alphabetical. If there are many categories - like all the possible names of hurricanes - it would be easier to sort the categories by the number of observations. You can do so by wrapping the full `table()` code within the `sort()` function:

```{r sort by region}
sort(table(colleges$region),
     decreasing=TRUE)
```

Once you have multiple sets of parentheses, it can be helpful to turn on the rainbow parentheses option. In the Code menu, select "Rainbow parentheses" if it is not checked.

Last week's notebook included a quick look at how to index. Indexing allows you to run a function or display values for one variable by specific values of that same variable or a different variable. We index with [brackets]. 

Suppose we want to find the `region` that Middlebury College is in. More formally, we want to pull the value of the `region` variable for the observation whose value for the `name` variable is `Middlebury College`. Since we are only referencing one value of the `name` variable, we identify it with two equal signs. Note that we also have to put "Middlebury College" in quotation marks since it is a character value rather than a numerical value:

```{r indexing}
colleges$region[colleges$name=="Middlebury College" |
                  colleges$name=="Yale University"]
```

Other indexing tools that are helpful:

- For not equal to, use !=
- To connect multiple arguments with and, use &
- To connect multiple arguments with or, use |

And for numeric variables:

- For greater than, use >
- For less than, use <
- For greater than or equal to, use >=
- For less than or equal to, use <=

How would you find the number of colleges in each institutional control level (use the `iclevel` variable) in the Northeast region?

### Replace this line with your code.
```{r}
table(colleges$iclevel[colleges$region=="Northeast"])
```

The table reports frequencies, or counts of observations. We can find the *proportion* in each institutional control level by wrapping the whole line in the `prop.table()` command:

```{r proportion table}
addmargins(prop.table(table(colleges$iclevel[colleges$region=="Northeast"])))
```

Try making a table showing the proportion of colleges in a specific state (use the two letter postal abbreviation) that is in each category of selectivity (using the `tier` variable). What is the modal selectivity category in that state?

### Replace this line with your code.

```{r}
prop.table(table(colleges$tier[
  colleges$state=="MA"
]))
```


```{r proportion table 2}
prop.table(table(colleges$tier
                 [colleges$state=="MA"]))
```

## Using Packages

While "Base R" is pretty great on its own, getting the most out of this software often requires additional packages. Today we'll start using the `dplyr` package, which loads as part of the `tidyverse` package. To install it (or any other package), click the `Packages` tab in the bottom right quadrant of R Studio and then click Install. In the center text box, type `tidyverse` and press enter. (Note: last week's notebook installed the `tidyverse` package so you should have it already. If you can't run the `library(tidyverse)` line, you'll need to reinstall the package.

You will have to load packages every time you start a new notebook (or script or file) that will use them. Load a package with the `library()` function:

```{r load package}
#install.packages("tidyverse")
library(tidyverse)
```

In the `Packages` tab, you should now see a check next to `tidyverse`.


## Creating Variables
Our goal this week is to recreate this NYT table showing that Middlebury ranks 9th in the ratio of students from the top 1 percent of the income distribution to students from the bottom 60 percent:

![College Mobility Table](../notes_slides/385_figures/chetty_colleges_table.png)

Our dataset already has a variable called `par_top1pc` with each college's proportion of students from the top 1 percent. 

What is this value for Middlebury?

```{r}
colleges$par_top1pc[colleges$name=="Middlebury College"]
```






### Replace this line with your code.
```{r}
colleges$par_top1pc[colleges$name=="Middlebury College"]
```

Let's use the `summary()` function to find the minimum value, the maximum value, the interquartile range, the median, and the mean:

```{r summary of numerical variable}
summary(colleges$par_top1pc)
```

What does the median tell us? 

Based on this spread, there are very few colleges with higher proportions of students in the top 1 percent than Middlebury. The default summary gives us the 25th, 50th, and 75th percentiles of the distribution. We can use the `quantile()` function to find any specific percentile we want. Let's get the 90th and 95th percentiles:

```{r finding 90th and 95th percentiles}
quantile(colleges$par_top1pc, c(.90, .95))
```

Middlebury's value is higher than even the 95th percentile! Try the 99th and 99.9th percentiles.

### Replace this line with your code.
```{r}
quantile(colleges$par_top1pc, c(.99, .999))
```

So Middlebury ranks *within* the top 1% of all colleges for the proportion of students *from* the top 1% of the family income distribution. 

### DELETE FROM POSTED NOTEBOOK 

Where exactly does Middlebury's proportion of students from the top 1% fall in the distribution?

```{r empirical cumulative distribution function}
top1pc_ecdf <- ecdf(colleges$par_top1pc)

top1pc_ecdf(colleges$par_top1pc[colleges$name=="Middlebury College"])
```

```{r}
plot(top1pc_ecdf)
```

# START HERE WEDNESDAY

Let's find some of the other colleges with similar proportions.

This is a task that `tidyverse` can help us do easily. It might be helpful to only look at a subset of the observations. We can create a new data frame called `colleges_top1pc_hi` that only includes colleges with at least 20% of students from the top 1 percent. We'll use the `filter()` function for this. One difference between `tidyverse` and `base R` is that when using `tidyverse` we separate the data frame name and the variable name with a comma rather than a dollar sign:

```{r new data frame with filtered variables}
colleges_top1pc_hi <- filter(colleges, par_top1pc>=.2)
```

Now we have a new data frame with only 15 observations. But we still have all 79 variables. We can keep just the variables we want by using the `select()` function. In this code, we are only keeping the `name` and `par_top1pc` variables in the `colleges_top1pc_hi` data frame:

```{r select variables for table}
colleges_top1pc_hi <- select(colleges_top1pc_hi, name, par_top1pc)
```

Finally we will order the 15 observations from the highest to lowest value of the `par_top1pc` variable. When working with an object (like a table), we used `sort` for this. When working with a data frame, `tidyverse` uses `arrange` for this. The default is to arrange from lowest to highest, so we wrap the variable name in `desc()` to assert we want a descending order:

```{r sort table}
colleges_top1pc_hi <- arrange(colleges_top1pc_hi, desc(par_top1pc))  
```

Now let's take a look at the data frame:

```{r view table}
colleges_top1pc_hi
```

The other main variable in the NYT story is the proportion of students from the bottom 60%. That variable does not exist in our original colleges data frame. But there are five separate variables with the proportions of students in each quintile (lowest 20% = `par_q1`, second to lowest 20% = `par_q2`, middle 20% = `par_q3`, second to highest 20% = `par_q4`, highest 20% = `par_q5`).

Here are the distributions:

- par_q1 = 0 - 19,800

- par_q2 = 19,801 - 37,300

- par_q3 = 37,301 - 65,300

- par_q4 = 65,301 - 110,200

- par_q5 = 110,201 +

- par_top1pc = 630,500 +

We create a variable for students from the bottom 60% by adding the proportions in the bottom three quintiles. The idea is to create a new dataframe (we'll call it `colleges2`) that will *mutate* our existing dataframe. Our mutation will be to add a new variable called `par_q123` that is the sum of `par_q1` and `par_q2` and `par_q3`. Here we go: 

```{r creating new data frame}
colleges2 <- mutate(colleges, par_q123 = par_q1 + par_q2 + par_q3)
```

This is a new data frame, so we change what goes before the dollar sign in our code whenever we want to reference it. Let's find the proportion of Middlebury students coming from the bottom 60% of the income distribution.


### REPLACE THIS LINE WITH YOUR CODE

```{r using new data frame}
colleges2$par_q123[colleges2$name=="Middlebury College"]
```

What can you say about the center and spread of this new variable?

### Replace this line with your code.
```{r}
summary(colleges2$par_q123)
```

Now we have the two variables (`par_top1pc` and `par_q123`) we need to recreate the NYT table. To compare them, we need another variable that measures the ratio of the proportion of students from the top 1 percent to the proportion of students from the bottom 60 percent. How do you think we do this? Call your new variable `ratio_top1_bottom60` and add it to a new dataframe called `colleges3`.

### Replace this line with your code.
```{r}
colleges3 <- mutate(colleges2, ratio_top1_bottom60 = par_top1pc / par_q123)
```

What is that ratio at Middlebury? How can you interpret that number in words?

```{r Middlebury ratio}
colleges3$ratio_top1_bottom60[colleges3$name=="Middlebury College"]
```

We have all we need to make something that actually looks like the NYT table, and we have the tools to make it happen. We will have to `select` only the column variables that we need. We will also `arrange` the observations from the highest to the lowest values of our new ratio variable. And we will want to only see the list of colleges with the top ten ratios using the `top_n()` function.

The `tidyverse` simplifies things even more by letting us run all of these functions together if we connect them with a symbol that R calls a pipe: |>. Whenever you see a pipe in a code chunk, read it as: "and don't stop before executing the function that is on the next line." 

To make sure the pipe is available, open the Tools menu and Global Options. In the Code window, confirm that "Use the native pipe operator" option is checked.

The other helpful `tidyverse` trick is that if we are combining several functions with pipes, we only have to tell R which dataframe we are using once (at the very beginning). So our full code chunk will look like this:

```{r data frame for final table}
colleges4 <- colleges3 |>    #the data frames we are creating and using
    select(name, par_top1pc, 
           par_q123, ratio_top1_bottom60) |>       #the variables we want to keep
    arrange(desc(ratio_top1_bottom60)) |>     #the order we want the observations
    top_n(10)                   #the number of ordered observations we want to keep
```

Note: this is the so-called "new pipe" R Studio has introduced with its latest version. It will eventually be the standard so it makes sense to learn it if you are learning R from scratch now. You will still come across the original pipe (which looks like %>%) in some support documents.

Unveil the rankings:

```{r view table with rankings}
colleges4
```

Note: If you just want to see the top 10 schools without saving the dataframe, this also works...

```{r}
colleges3 %>%       #the data frames we are creating and using
    select(name, par_top1pc, 
           par_q123, ratio_top1_bottom60) |>       #the variables we want to keep
    arrange(desc(ratio_top1_bottom60)) |>     #the order we want the observations
    top_n(10) #the number of ordered observations we want to keep
```


One last step could be to add a variable giving the numerical rank of each college. This could be helpful for knowing something about colleges that do not rank in the top group. We'll use `mutate` again to create a new variable that saves the row number that is already stored in R's memory for each data frame:

```{r generate rank variable}
colleges4 <- mutate(colleges4, rank = row_number())
colleges4 <- select(colleges4, rank, name, ratio_top1_bottom60)
colleges4
```


# Thinking Sociologically

## What other variables would you want as you try to understand these statistics?

To see a list of all the variable in a data frame, use the `names()` function:

```{r}
names(colleges)
```

Pull Middlebury's value of another one of the variables in the dataset:

## Delete

```{r}
colleges$mr_kq5_pq1[colleges$name=="Middlebury College"]
```

```{r}
colleges$kq5_cond_parq1[colleges$name=="Middlebury College"]
colleges$par_q1[colleges$name=="Middlebury College"]
.2808793 * .02670696
```


How does Middlebury's value compare to overall distribution: 

## Delete

```{r}
summary(colleges$kq5_cond_parq1)
```

Which college has the maximum value for that variable?

## Delete

```{r}
colleges$name[colleges$kq5_cond_parq1>=.952]
```

or...

```{r}
colleges$name[colleges$kq5_cond_parq1==max(colleges$kq5_cond_parq1)]
```


## Are there other ratios you would want to know? For example, might any of these be relevant?:

- Top 1 percent / Bottom 20 percent
- Top 1 percent / Bottom 40 percent
- Top 1 percent / Middle 60 percent
- Top 20 percent / Bottom 20 percent

Where do you think Middlebury would rank for each of these comparisons?

Let's try the ratio of students from the top 1 percent to the middle 60 percent:

# Delete


```{r}
colleges5 <- colleges |>
  mutate(top_bottom_ratio = par_top1pc / par_q1)

colleges5$top_bottom_ratio[colleges5$name=="Middlebury College"]
```


```{r}
colleges5 <- colleges |>
  mutate(par_q234 = par_q2 + par_q3 + par_q4) |>
  mutate(ratio_top1_middle60 = par_top1pc / par_q234) |>
  arrange(desc(ratio_top1_middle60)) |>
  mutate(rank = row_number()) |>
  select(rank, name, ratio_top1_middle60)
```

We could use filter as another way to only see Middlebury's values:

```{r}
middlebury <- filter(colleges5,
                     name=="Middlebury College")

middlebury
```


Here are all the other ratios:

```{r other ratios}
colleges5 <- colleges %>%
  mutate(ratio_top1_bottom20 = par_top1pc / par_q1,
         ratio_top1_bottom40 = par_top1pc / (par_q1 + par_q2),
         ratio_top1_middle60 = par_top1pc / (par_q2 + par_q3 + par_q4),
         ratio_top20_bottom20 = par_q5 / par_q1) %>%
     select(name, ratio_top1_bottom20, ratio_top1_bottom40, ratio_top1_middle60,
            ratio_top20_bottom20)
```

```{r}
colleges6 <- arrange(colleges5, desc(ratio_top1_bottom20))
```

Now let's try some of the tables:

## For top 1 / middle 60 ratio:
```{r top 1 to middle 60 ratio}
colleges_top1_middle60 <- colleges5 %>%
    select(name, ratio_top1_middle60) %>%
    arrange(desc(ratio_top1_middle60)) %>%
    top_n(10) %>%
    mutate(rank_ratio_top1_middle60 = row_number())
colleges_top1_middle60
```

```{r top 1 to moddle 60 ratio for middlebury}
colleges_top1_middle60$rank_ratio_top1_middle60[colleges_top1_middle60$name=="Middlebury College"]
```


## For top 20 / bottom 20 ratio:

```{r top 20 to bottom 20 ratio}
colleges_top20_bottom20 <- colleges5 %>%
    select(name, ratio_top20_bottom20) %>%
    arrange(desc(ratio_top20_bottom20))
```

Show the table. You can use the "Next" button on the bottom of the table to find Middlebury:
```{r top 20 to bottom 20 ratio table, eval = FALSE}
colleges_top20_bottom20 # wouldn't want to knit this so add eval = FALSE...
```

This is a time when saving the actual rank would be helpful. We can create that variable with the row_number() function:

```{r top 20 to bottom 20 ranks}
colleges_top20_bottom20 <- mutate(colleges_top20_bottom20, rank = row_number())
```

And then find Middlebury's rank:
```{r top 20 to bottom 20 rank for middlebury}
colleges_top20_bottom20$rank[colleges_top20_bottom20$name=="Middlebury College"]
```

Interpretation: Middlebury has the 48th highest ratio of students from the top quintile versus students from the bottom quintile