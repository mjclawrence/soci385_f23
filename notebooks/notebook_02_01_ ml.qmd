---
title: "Week Two, Class One"
author: "Matt Lawrence"
date: "September 19, 2023"
format: html
---

## Getting Started

To begin, copy all the text on this screen. Then open RStudio, and in the "File" menu select "New File" then "Quarto Document". Add a title like "SOCI 385, Week Two, Class One", include your name in the "Author" box, select "HTML" as the output format, and click Create. A default markdown file will open. Delete all the text in the default file below the header (everything after line 5) and paste in the text you copied to your clipboard. Make sure that "Quarto" is selected in the file type drop down menu in the bottom right corner of this pane. Also make sure that you are using the `Source` editing view (you should have line numbers in this document). Save this file.

Load the packages we will be using:

```{r}
#| label: load packages

library(tidyverse) # for data wrangling
library(DT) # for datatable
```

Load the dataset as a data frame called `colleges` using the `read_csv()` function. This comes from the `tidyverse` package and is slightly different from `read.csv()` which we saw last week.

All the extra info that R reported when we loaded the packages was annoying. We can suppress those messages by adding the `message: FALSE` option in a chunk option:

```{r}
#| label: load data
#| message: FALSE

colleges <- read_csv("https://raw.githubusercontent.com/mjclawrence/soci385_f23/main/data/colleges.csv")
```

How many observations and variables are there in this data frame?

What kind of variable is the `tier` variable? (`tier` is the college selectivity)

What kind of variable is `par_top1pc` variable? (`par_top1pc` is the proportion of students from a college with parent income in the top 1%)

## Reviewing Tables

Let's do a quick review of the functions we started looking at last week. If you want to know how many colleges in this data frame are in each tier, you could make a table of the `tier` variable. Try it!

### REPLACE THIS LINE WITH YOUR CODE CHUNK

```{r}
#| label: tier table

table(colleges$tier)
```

The table lists categories in alphabetical order by default. With only six possible values, it is pretty easy to pick out the *modal value* even when they are alphabetical. If there are many categories - like all the possible names of hurricanes - it would be easier to sort the categories by the number of observations. You can do so by wrapping the full `table()` code within the `sort()` function:

### REPLACE THIS LINE WITH YOUR CODE CHUNK

```{r}
#| label: sorted tier table

sort(table(colleges$tier), decreasing=TRUE)
```

Once you have multiple sets of parentheses, it can be helpful to turn on the rainbow parentheses option. In the Code menu, select "Rainbow parentheses" if it is not checked.

Last week's notebook included a quick look at how to index. Indexing allows you to run a function or display values for one variable by specific values of that same variable or a different variable. We index with \[brackets\].

Suppose we want to find the `tier` that Middlebury College is in. More formally, we want to pull the value of the `tier` variable for the observation whose value for the `name` variable is `Middlebury College`. Since we are only referencing one value of the `name` variable, we identify it with two equal signs. Note that we also have to put "Middlebury College" in quotation marks since it is a character value rather than a numerical value:

```{r}
#| label: indexing with brackets

colleges$tier[colleges$name=="Middlebury College"]
```

Other indexing tools that are helpful:

-   For not equal to, use !=
-   To connect multiple arguments with and, use &
-   To connect multiple arguments with or, use |

Try pulling the tiers for Middlebury College and the Massachusetts Institute Of Technology in the same chunk.

### REPLACE THIS LINE WITH YOUR CODE CHUNK

```{r}
#| label: indexing exercise

colleges$tier[colleges$name=="Massachusetts Institute Of Technology" | 
                colleges$name=="Middlebury College"]

```

And for numeric variables:

-   For greater than, use >
-   For less than, use <
-   For greater than or equal to, use >=
-   For less than or equal to, use <=

How would you find the number of public and private colleges in the "Other elite schools (public and private)" tier?

### REPLACE THIS LINE WITH YOUR CODE CHUNK


```{r}
#| label: public table

table(colleges$public[colleges$tier=="Other elite schools (public and private)"])
```

The table reports frequencies, or counts of observations. We can find the *proportion* in this tier by wrapping the whole line in the `prop.table()` command:

```{r}
#| label: proportion table

prop.table(table(colleges$public[colleges$tier=="Other elite schools (public and private)"]))
```

Want to round? Wrap the table in the `round()` function and add an option for the number of post-decimal digits to include. In this example, we round to 2 decimal places.

```{r}
#| label: rounded proportion table

round(prop.table(table(colleges$public[colleges$tier=="Other elite schools (public and private)"])),2)
```

## Reviewing Summaries

For numeric variables, using `summary()` to explore the distribution is better than a table. Let's find the distribution of the `rel_attend_sat` variable. This variable measures the chances that a student from the top 1% of the income distribution will attend a college compared to other students with the same SAT scores.

### REPLACE THIS LINE WITH YOUR CODE CHUNK

```{r}
summary(colleges$rel_attend_sat)
```

What do these numbers tell us? What is the range? The interquartile range? The median? The mean?

Where does Middlebury fall in the distribution? Start by recalling Middlebury's value for the `rel_attend_sat` variable using indexing.

### REPLACE THIS LINE WITH YOUR CODECHUNK

```{r}
colleges$rel_attend_sat[colleges$name == "Middlebury College"]
```

How would you interpret this number?

The `summary()` function's defaults do not show exactly where Middlebury is. We can use the `quantile()` function to get percentile cutoffs for different parts of the distribution. Include the variable you want, then a comma, then `c()` with the cutoffs you want. We will see the `c()` function a lot. It is a helpful way to concatenate or connect terms.

In this example, we want to know the 80th and 90th percentiles of the distribution.

```{r}
#| label: quantile

quantile(colleges$rel_attend_sat, c(0.8, 0.9))
```

```{r}
quantile(colleges$rel_attend_sat, c(0.79, 0.8))
```

You can use `quantile()` to get any percentile in the distribution. That would allow you to recreate all the points that `summary()` gives except the mean. If you only want the mean, use the `mean()` function:

```{r}
#| label: mean function

mean(colleges$rel_attend_sat)
```

A twist: How would you find the colleges with higher `rel_attend_sat` values than Middlebury College?

### REPLACE THIS LINE WITH YOUR CODE CHUNK

```{r}
table(colleges$name[colleges$rel_attend_sat > colleges$rel_attend_sat[colleges$name=="Middlebury College"]])
```

```{r}
colleges$name[colleges$rel_attend_sat>2.904448]
```


## Taking advantage of tidyverse

For simple indexing, bracketing works. But we can start to see the limits here. Some tidyverse functions will make this easier.

The tidyverse function that is the equivalent of indexing is `filter()`. It chooses the rows you want.

In this example, we want to make a new dataframe called `Middlebury` that only keeps the rows of the original `colleges` data frame where the value of the name variable is equal to "Middlebury College".

```{r}
#| label: introducing filter

middlebury <- filter(colleges, name == "Middlebury College")
```

The `select()` function chooses which columns you want. In this example, we only want the columns `name` and `rel_attend` from the new `middlebury` data frame. The `rel_attend` variable is relative chances of attending for students from the top 1% without adjusting for the SAT.

```{r}
#| label: introducing select

select(middlebury, name, rel_attend)
```

The real power comes when we combine functions. The advantage of this approach is that we can *chain* functions together using the pipe operator (|>) that we set up last class. Now we only need to state the dataframe once.

The syntax here is that we are doing something with the `colleges` dataframe (we'll go back to the full dataset), and then in each line list what you are doing with the dataframe. Connect each function with a pipe (|>). So if we wanted to pull the value of the `rel_attend` variable for Middlebury we could do this:

```{r}
#| label: introducing chains

colleges |>
  filter(name == "Middlebury College") |> 
  select(rel_attend)
```

The keyboard shortcut for the pipe is shift-command-m.

Try using a chain to find the names of the colleges and the `rel_attend` values for the colleges with higher `rel_attend` values than Middlebury.

### REPLACE THIS LINE WITH YOUR CODE CHUNK

```{r}
colleges |> 
  filter(rel_attend > 10.63615) |> 
  select(name, rel_attend)
```

We used the `sort()` function with tables. The equivalent tidyverse function is `arrange()`. By default, `arrange()` arranges by the first column. Assert the variable you want to sort by using the `order_by` option.

```{r}
#| label: introducing arrange


colleges |> 
  filter(rel_attend > 10.63615) |> 
  select(name, rel_attend) |> 
  arrange(order_by = rel_attend)
```

To switch the order from minimum-to-maximum to maximum-to-minimum, simply put a negative sign in front of the variable by which you are ordering:

```{r}
#| label: arrange min to max


colleges |> 
  filter(rel_attend > 10.63615) |> 
  select(name, rel_attend) |> 
  arrange(order_by = -rel_attend)
```

If you want to sort columns interactively, the datatable package we saw last class works well with chains. We loaded the `DT` package at the start of this notebook; you need to load it to use the `datatable()` function.

```{r}
#| label: datatable with chains


colleges |> 
  filter(rel_attend > 10.63615) |> 
  select(name, rel_attend) |> 
  datatable()
```

Use `filter()`, `select()`, and `datatable()` to get the name, rel_attend, rel_attend_sat, and par_top1pc variables for the colleges in the NESCAC test band tier. Where does Middlebury fall in each of these rankings?

### REPLACE THIS LINE WITH YOUR CODE CHUNK

```{r}
colleges |> 
  filter(test_band_tier == "NESCAC") |> 
  select(name, rel_attend, rel_attend_sat, par_top1pc) |> 
  datatable()
```

## Introducing Strings

We have simplified a lot from the original form of indexing using brackets. Let's look at another tool to simplify character strings. Suppose we just want to type "Middlebury" instead of "Middlebury College" in a filter. We could use the `str_detect()` function to identify any observations that *detect* a string in a variable.

In this example, we want to filter the colleges dataframe to only include observations that detect in the `name` variable the value "Middlebury":

```{r}
#| label: introducing str_detect


colleges |> 
  filter(str_detect(name, "Middlebury"))
```

Note that the `str_detect()` function is case sensitive. 

How could you use `filter()`, `select()` and `str_detect()` to pull the name, public, rel_attend, rel_attend_sat, and par_top1pc values for the California Institute of Technology and the Massachusetts Institute of Technology?

### REPLACE THIS LINE WITH YOUR CODE CHUNK

```{r}
colleges |> 
  filter(str_detect(name, "Technology")) |> 
  filter(public == "Private") |> 
  select(name, public, rel_attend, rel_attend_sat, par_top1pc)
```

How to include Middlebury as well?

```{r}
colleges |> 
  filter(str_detect(name, "Technology|Middlebury")) |> # Detect "Technology" OR "Middlebury"
  filter(public == "Private") |> 
  select(name, public, rel_attend, rel_attend_sat, par_top1pc)
```

## Summarizing by group

So far we have been looking at individual colleges. But we know that some colleges share characteristics, like their tiers. It can be useful to know how some measures vary across tiers. For example, how could we find the average proportion of students from the top 1% for each test band tier?

One option would be to use the `group_by()` function and combine it with `summarise()`. The `group_by()` function pulls all the observations with the same values for the variable by which you are grouping. The `summarise()` function is where you say what you want done to each of those groups.

In this example, we want to group colleges into their test band tier categories. Then for each of them we want to create a new variable called `mean_par_top1pc` that is the `mean()` function applied to the `par_top1pc` variable.

```{r}
#| label: introducing group_by

colleges |> # the dataframe
  group_by(test_band_tier) |> # we want something for each value of this variable 
  summarise(mean_par_top1pc = mean(par_top1pc)) # what we want for each group
```

There is an issue with the "Other Top 100 Public" group. Some observations in that tier are missing values for `par_top1pc`. We can remove the NAs using the `na.rm = TRUE` option.

```{r}
#| label: introducing na.rm

colleges |> 
  group_by(test_band_tier) |> 
  summarise(mean_par_top1pc = mean(par_top1pc, na.rm = TRUE))
```
