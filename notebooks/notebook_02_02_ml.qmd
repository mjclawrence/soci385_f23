---
title: "Week Two, Class Two"
author: "ML"
format: html
---

```{r}
#| label: load packages
#| message: FALSE

library(tidyverse)
library(DT)
```


```{r}
#| label: load data
#| message: FALSE

colleges <- read_csv("https://raw.githubusercontent.com/mjclawrence/soci385_f23/main/data/colleges.csv")
```

## Creating Variables
Our goal today is to recreate this NYT table showing that Middlebury ranks 9th in the ratio of students from the top 1 percent of the income distribution to students from the bottom 60 percent:

![College Mobility Table](../385_figures/chetty_colleges_table.png)

We know our dataset already has a variable called `par_top1pc` with each college's proportion of students from the top 1 percent. 

Let's get the colleges with more than 20% of students from the top 1%. 

```{r}
#| label: create dataframe

top1pc <- colleges |> 
  filter(par_top1pc > .18)
```

Now we have a new data frame with only 15 observations. It still has all 14 variables and we know we can keep just the variables we want by using the `select()` function. 

But the other main variable in the NYT story - the proportion of students from the bottom 60% - does not exist in our original colleges data frame. Instead there are five separate variables with the proportions of students in each quintile (lowest 20% = `par_q1`, second to lowest 20% = `par_q2`, middle 20% = `par_q3`, second to highest 20% = `par_q4`, highest 20% = `par_q5`).

Here are the distributions:

- par_q1 = 0 - 19,800

- par_q2 = 19,801 - 37,300

- par_q3 = 37,301 - 65,300

- par_q4 = 65,301 - 110,200

- par_q5 = 110,201 +

- par_top1pc = 630,500 +

We can create a variable for students from the bottom 60% by adding the proportions in the bottom three quintiles. The function for creating a new variable is `mutate()`. The idea is to create a new variable that will *mutate* our existing dataframe. Our mutation will be to add a new variable called `par_q123` that is the sum of `par_q1` and `par_q2` and `par_q3`.


```{r}
top1pc_2 <- top1pc |> 
  mutate(par_q123 = par_q1 + par_q2 + par_q3)
```


Find the proportion of Middlebury students coming from the bottom 60% of the income distribution.

### REPLACE THIS LINE WITH YOUR CODE

```{r using new data frame}
top1pc_2 |> 
  filter(str_detect(name, "Middlebury")) |> 
  select(par_q123)
```

Now we have the two variables (`par_top1pc` and `par_q123`) we need to recreate the NYT table. To compare them, we need another variable that measures the ratio of the proportion of students from the top 1 percent to the proportion of students from the bottom 60 percent. How do you think we do this? Call your new variable `ratio_1_60` and add it to a new dataframe called `top1pc_3`.

### Replace this line with your code.
```{r}
top1pc_3 <- top1pc_2 |> 
  mutate(ratio_1_60 = par_top1pc / par_q123)
```

What is that ratio at Middlebury? How can you interpret that number in words?

```{r Middlebury ratio}
top1pc_3 |> 
  filter(str_detect(name, "Middlebury")) |> 
  select(ratio_1_60)
```

We have all we need to make something that actually looks like the NYT table, and we have the tools to make it happen. We will have to `select` only the column variables that we need. We will also `arrange` the observations from the highest to the lowest values of our new ratio variable. And we will want to only see the list of colleges with the top ten ratios using the `top_n()` function.


```{r}
top1pc_3 |> 
  select(name, par_top1pc, par_q123, ratio_1_60) |> 
  slice_max(ratio_1_60, n = 10)
```

## Introducing Plotting

Load in the new data

```{r}
colleges2 |> 
  filter(name == "Middlebury College") |> 
  ggplot(aes(x = par_income_bin, y = rel_attend))
```

```{r}
colleges2 |> 
  filter(name == "Middlebury College") |> 
  ggplot(aes(x = par_income_bin, y = rel_attend)) +
  geom_point() + geom_line(group = "name")
```

```{r}
colleges2 |> 
  filter(name == "Middlebury College") |> 
  ggplot(aes(x = par_income_bin, y = rel_attend,
             text = paste(par_income_lab, ":", 
                          round(rel_attend,2)))) +
  geom_point() + geom_line(group = "name")
```

Use the `plotly` package to make interactive figures

```{r}
#install.packages("plotly") # hashtag this line after installing
library(plotly)
```

```{r}
ggplotly(myplot, tooltip = "text")
```