# Setting Up

Load the `cupid.csv` file as a data frame called `cupid` and load tidyverse.

```{r}
#| label: load data and packages
#| message: FALSE

library(tidyverse)
cupid <- read_csv("https://raw.githubusercontent.com/mjclawrence/soci385_f23/main/data/cupid.csv")
```

# How are sampling distributions and normal distributions related?

Last class, we discussed the advantages of normal distributions for determining how likely individual values (in terms of standardized units) are to fall from the mean. The purpose of doing so is to use our knowledge of the normal distribution to have a sense of what the observed statistics in our sample can tell us about the likely values of the parameters in our population. We'll use this when we move to inferential statistics to estimate how well the mean in our sample represents the mean in the population.

When our sample statistics are normally distributed, the general 68-95-99.7 rules work well. When our sample statistics are not normally distributed, we have to think slightly differently about how to apply what we know about normal distributions. That's where the Central Limit Theorem comes into play. We assert that if we take repeated samples from our sample, the means of those repeated samples will be normally distributed...even if the values in our sample are not normally distributed. Let's see why that is the case, and why we need large sample sizes for the principle to hold.

Let's start by showing that the values of the age variable in our dataset are not normally distributed.

```{r}
#| label: histogram of age

hist(cupid$age)
```

The mean of age in this sample is:

```{r}
#| label: mean of age

mean(cupid$age)
```

Let's set up a way to create lots of samples based on our sample and compare the means across them. Using the values of age in our sample as the pool of possible values of the population mean, we can pull samples of any size and repeat that process any number of times. In this example, we'll see what happens if we pull 1000 samples with 2500 observations in each sample.

Start by creating an empty "null" bucket where all the sample means will end up

```{r}
#| label: using null to create empty space to fill

all_means = NULL
```


Now we set up the loop. See where we assert 1000 samples and 2500 observations per sample:

```{r}
#| label: set up loop

for (i in 1:1000) {
  my_sample = sample(cupid$age, 2500, replace = TRUE)
  sample_mean = mean(my_sample)
  all_means <- c(all_means, sample_mean)
}
```

And plot the sample means. They should be normally distributed!

```{r}
#| label: plot all means from samples

hist(all_means)
```

We can write a function to automate more comparisons. In the function called `sampling_function`, we replace the number of samples with an object called `sample_times` and the number of observations in each sample with an object called `sample_size`.

```{r}
#| label: set up function

sampling_function <- function(sample_times, sample_size) {
  all_means = NULL
  for (i in 1:sample_times) {
    my_sample = sample(cupid$age, sample_size, replace = TRUE)
    sample_mean = mean(my_sample)
    all_means <- c(all_means, sample_mean)
  }
  hist(all_means, prob = TRUE)
  lines(density(all_means), col = "red", lw = 2)
  rm(all_means)
}
```

Now we recall the name of the function and provide two values: the number of pulls and the size of each pull. In this example, we'll have 50 samples each with 50 observations. Are the means normally distributed with that sample size?

```{r}
#| label: run function

sampling_function(50, 50)
```

What size sample and what number of repeated samples do you need for the means to approximate a normal distribution? 



# Reviewing Confidence Intervals

Last class we constructed the confidence interval for a mean. We began by finding the standard error using the following formula:

$\Large{SE_{mean} = \frac {sd}{\sqrt{n}}}$

```{r calculate standard error of age}

age_se <- sd(cupid$age) / sqrt(length(cupid$age))
```

The margin of error is the standard error times the z-score associated with the confidence interval we are constructing. 

For the 90% confidence interval, the z-score is 1.65. For the 95% confidence interval, the z-score is 1.96. For the 99% confidence interval, the z-score is 2.58.

The lower limit of the confidence interval is the sample mean minus the margin of error. The upper limit of the confidence interval is the sample mean plus the margin of error.

Let's save the lower limit and upper limit for the 95% confidence interval:

```{r}
#| label: save lower and upper limits for .95 confidence interval

age_ll <- (mean(cupid$age) - 1.96*age_se)
age_ul <- (mean(cupid$age) + 1.96*age_se)
```

It is often helpful to save the confidence interval and the mean as a vector:

```{r}
#| label: save confidence interval as vector

age_ci <- c(age_ll, mean(cupid$age), age_ul)

age_ci
```

How would you interpret this? Using this 95% confidence interval, are you confident that the mean age in the population to which this sample generalizes is less than 33?


# Incorporating String Functions

What if we wanted to know whether the mean age in the population varied between respondents who do and do not have kids?

Let's start by looking at the distribution of the `offspring` variable.

### REPLACE THIS LINE WITH YOUR CODE CHUNK ###

If you add up all the values, they only sum to 1011 rather than 2500. A good way to know how many missing values there are in your tables is to add the "exclude = NULL" option:

```{r}
#| label: example of addmargins and exclude

addmargins(table(cupid$offspring, exclude = NULL))
```

So 1489 observations do not have an answer to the `offspring` question. And there are many categories capturing respondents who have kids. How could we make a binary variable called `kids` to distinguish respondents with kids (n = 207) and without kids (n = 804)? Give the respondents with kids a 1 and those without kids a 0.

### REPLACE THIS LINE WITH YOUR CODE CHUNK ###


Use this new variable to find the 99% confidence intervals of age for respondents with and without kids.

### REPLACE THIS LINE WITH YOUR CODE


Why is the confidence interval for the mean of respondents with kids so much wider?

## Finding The Confidence Interval For A Proportion

Categorical variables do not have spreads or distributions like continuous variables do. As a result, using the standard deviation to calculate the standard error for a proportion won't work. Instead, we'll use a different formula to find the standard error for a proportion:

$\Large{SE_{proportion} = \sqrt{ \frac {p(1-p)} {n}}}$

If you really want to know why proportions and means have different standard errors, check out [this mathematical explanation.](http://www.jerrydallal.com/lhsp/psd.htm)

Today we'll find the 95% confidence interval for the proportion of OK Cupid users reporting their sexual orientation as "gay". First let's find the proportion stating that orientation in our sample by making a proportion table of the `orientation` variable:

### REPLACE THIS LINE WITH YOUR CODE CHUNK ###

Refresher from problem set: find sex differences in orientation distribution...

### REPLACE THIS LINE WITH YOUR CODE CHUNK ###

And find average age of male and female respondents in each orientation category...

### REPLACE THIS LINE WITH YOUR CODE CHUNK ###

To calculate the standard error for the proportion of all respondents self-reporting as gay, we need a way to calculate `p(1-p)`. The insight here is that if we create a new binary variable where respondents self-reporting as gay are coded 1 and respondents self-reporting as bisexual or straight are coded 0, the value of p will be the proportion of cases with a 1, which we know is also the mean of the binary variable.

We can create that new binary variable by combining `mutate()` with the `ifelse()` function. Use the `ifelse()` function to add to the existing `cupid` data frame a new variable called `gay` that will take the value 1 if the value for the orientation variable is `gay` and will take the value 0 if the value for the orientation variable is anything else.

### REPLACE THIS LINE WITH YOUR CODE


The mean of our new variable should be the same as the value in the proportion table we created earlier (0.088). Check it.

### REPLACE THIS LINE WITH YOUR CODE


Now we can find the standard error of this proportion by plugging in the mean of our new variable as p in the standard error formula:

```{r}
#| label: calculate standard error using binary variable

gay_se <- sqrt((mean(cupid$gay) * (1 - mean(cupid$gay))) /
     length(cupid$gay))
     
gay_se
```

Once we have the standard error, we construct the margin of error and the confidence interval for a proportion the same way we do for a mean. Find the 95% confidence interval for the proportion of respondents self-reporting as gay. Later today it is going to be important that the confidence interval and the mean are saved in a vector, so remember to do that! Call your vector `gay_ci`.

### REPLACE THIS LINE WITH YOUR CODE CHUNK ###


# Exercise

The `orientation` variable in this dataset has two other categories: bisexual and straight. Construct the 95% confidence intervals for both of them, and save them in separate vectors called `bisexual_ci` and `straight_ci`.

### REPLACE THIS LINE WITH YOUR CODE CHUNK ###

```{r}
#| label: second binary variable

cupid <- mutate(cupid, bisexual = 
                     ifelse(orientation=="bisexual", 1, 0))

bisexual_se <- sqrt( (mean(cupid$bisexual) * 
                           (1 - mean(cupid$bisexual))) /
                          length(cupid$bisexual))

bisexual_se

bisexual_ll <- mean(cupid$bisexual) - 1.96*bisexual_se
bisexual_ul <- mean(cupid$bisexual) + 1.96*bisexual_se
bisexual_ci <- c(bisexual_ll, mean(cupid$bisexual), bisexual_ul)
bisexual_ci
```

```{r}
#| label: third binary variable

cupid <- mutate(cupid, straight = ifelse(orientation=="straight", 1, 0))
straight_se <- sqrt( (mean(cupid$straight) * (1 - mean(cupid$straight))) /
     length(cupid$straight))
     
straight_se

straight_ll <- mean(cupid$straight) - 1.96*straight_se
straight_ul <- mean(cupid$straight) + 1.96*straight_se
straight_ci <- c(straight_ll, mean(cupid$straight), straight_ul)
straight_ci
```

# Combining Vectors To Create A Table

You should have three vectors that have lower limits, means, and upper limits for each proportion's confidence interval. Now we want to create one table with all that information. We'll do that using the `rbind()` function, which binds rows together.

```{r}
#| label: rbind to build table with mulitple vectors

orientation_table <- rbind(bisexual_ci, gay_ci, straight_ci)
orientation_table
```

With that table saved as an object, this might be a good time to round all the values:

```{r}
#| label: round table values

orientation_table <- round((orientation_table),3)
orientation_table
```

How do you add or change the row names of a table?

```{r}
#| label: change row names

rownames(orientation_table) <- 
     c("Bisexual", "Gay", "Straight")

orientation_table
```

How do you add or change the column names?

```{r}
#| label: change column names

colnames(orientation_table) <- 
     c("Lower Limit", "Proportion", "Upper Limit")

orientation_table
```

Reviewing kable...

```{r}
#| label: kable example

library(kableExtra)

orientation_table |> 
  kable(booktabs = TRUE,
    align = rep("c", 3))
```



# From Tables To Figures

What kind of figure would be good for visualizing these data?

All we have right now is a table. But we know ggplot is going to need these values in the form of a data frame with x and y variables. There are a few steps to turn this table into a ggplot-ready data frame.

In the second line in the chunk below, we assert that we want to use the table as a dataframe. In the third line, we want the rownames of our table to become a column in the new dataframe and we want the new column to have the variable name "Orientation".


```{r}
#| label: moving rownames to columns

orientation_table <- orientation_table |> 
  as.data.frame() |> 
  rownames_to_column(var = "Orientation")
```

That works well as a table. But when we feed this info into our ggplot aesthetic map it might be easier to have simpler names for the other columns. Let's change the other column names so they do not have spaces (since we will use them as variables). For this example, name the columns: Orientation, LL, Proportion, and UL.

```{r}
#| label: edit column names for ggplot

colnames(orientation_table) <- 
     c("Orientation", "LL", "Proportion", "UL")
```

Finally, we are ready to build a figure. Save it as an object called `orientation_plot` and try using `geom_point` which requires an x and a y variable.

### REPLACE THIS LINE WITH YOUR CODE CHUNK ###


We can show the 95% confidence interval by adding two variables to our aesthetic map: the variable with our lower limit is the `ymin` value and the variable with our upper limits is the `ymax` value. And then add another layer with geom_errorbar():

```{r}
#| label: plot with points

orientation_plot <- ggplot(orientation_table, 
                           aes(x = Orientation, 
                               y = Proportion,
                               ymin = LL, ymax = UL))

orientation_plot + geom_point() + geom_errorbar()
```


The proportion of respondents reporting their orientation as straight is very high. Perhaps it is more interesting to only compare the proportions reporting their orientations as bisexual or gay. We can filter out the respondents reporting their orientations as straight.

```{r}
#| label: filtered plot with error bars

orientation_plot <- orientation_table |> 
  filter(Orientation != "Straight") |> 
  ggplot(aes(x = Orientation,
             y = Proportion,
             ymin = LL,
             ymax = UL)) +
  geom_point() + geom_errorbar()

orientation_plot
```

### Extra 1

```{r}

cupid |> 
  filter(!is.na(kids)) |> 
  group_by(kids) |> 
  summarise(mean = mean(age),
            sd = sd(age),
            se = (sd(age) / sqrt(length(age))),
            ll = (mean(age) - 2.58*se),
            ul = (mean(age) + 2.58*se)) |> 
  select(kids, sd, se, ll, mean, ul)
```

### Extra 2

```{r}

cupid <- mutate(cupid, bisexual = 
                     ifelse(orientation=="bisexual", 1, 0))

bisexual_se <- sqrt( (mean(cupid$bisexual) * 
                           (1 - mean(cupid$bisexual))) /
                          length(cupid$bisexual))

bisexual_se

bisexual_ll <- mean(cupid$bisexual) - 1.96*bisexual_se
bisexual_ul <- mean(cupid$bisexual) + 1.96*bisexual_se
bisexual_ci <- c(bisexual_ll, mean(cupid$bisexual), bisexual_ul)
bisexual_ci
```

```{r}
#| label: third binary variable

cupid <- mutate(cupid, straight = ifelse(orientation=="straight", 1, 0))
straight_se <- sqrt( (mean(cupid$straight) * (1 - mean(cupid$straight))) /
     length(cupid$straight))
     
straight_se

straight_ll <- mean(cupid$straight) - 1.96*straight_se
straight_ul <- mean(cupid$straight) + 1.96*straight_se
straight_ci <- c(straight_ll, mean(cupid$straight), straight_ul)
straight_ci
```